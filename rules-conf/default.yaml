# export match template
template-define: &default-template # define anchor for reference below by &anchor-name
  name: default
  header: | 
    matches.count: ${matches.count}, groups.count: ${groups.count}, groups.keys: ${groups.keys}
    ===========================================================================================
  match : | 
    [match[${index}]${match.start}:${match.end}]${match.value}
  group : | 
    [group[${index}]${group.start}:${group.end}]${group.key}=${group.value}
  
  footer: | 
    ===========================================================================================
    ===="copyright lqwangxg@gmail.com 2023"====================================================

export-template: &default-export-template
  <<: *default-template     # reference anchor by *anchor-name
  name: export  # override the name
replace-template: &default-replace-template
  name: replace # override the name
  header:
  match :
  group :
  footer: 
   
# check content skip or do on condition
# priority descend: skip_ifany, skip_when, do_ifany, do_when
check-patterns-define: &default_check_patterns
  skip_ifany: []
  skip_when: []
  do_ifany: []
  do_when: []

rule-define: &default-rule
  # rule-name
  name: default
  # rule-group
  group: default

  # file name of include/exlude
  #.myapp.yaml is not included.
  include-file: '\w+\.(html|jsp|java|js|css)$'
  #start/end with (log|bak|back|org|\d+) is excluded
  exclude-file: '^(log|bak|back|org|\d+).+(log|bak|back|org|\d+)$'  
  
  # match destination range(spos=startIndex, epos=endIndex + endLength) 
  # if range_start is empty then spos=0
  # if range_end is empty then epos=length(full) or ahead of next range_start
  # optional: if groupname is included in pattern, 
  #  { match.group.name: match.group.nalue } will be saved in ${match_params_map}
  range-start: 
  range-end:

  # regex pattern   
  pattern: 

  export-template: 
    <<: *default-export-template
    #name: export  # override the name
  replace-template:
    <<: *default-replace-template
    #name: replace # override the name  

  # check full content by regex match
  full-patterns :
    <<: *default_check_patterns
    # write override here

  # check range content by regex match
  range-patterns: 
    <<: *default_check_patterns
    # write override here


  # check match content by regex match
  match-patterns: 
    <<: *default_check_patterns
    # write override here


  # check match content by evaluate
  match-vals: 
    <<: *default_check_patterns
    # write override here

  # process for refreshing params
  # support functions: 
  #  string: len(string), ucase(string), lcase(string)
  #  number: +,-,*,/
  #  compare: <, <=, >, >=, ==
  match-formulas: []

#=========================
# write your custom rules below.
#=========================
custom-rules:
  - <<: *default-rule  #default-rule
  - <<: *default-rule  #reference anchor defined above by *anchor-name
    name: "openMultiMessageDialog"
    # regex pattern   
    pattern: (?P<indent>[ \t]*)if\((?P<call>openMultiMessageDialog)\((?P<param>[^{]+)\)\s*\)\s*\{(?P<process>[^}]+?)\}
    range-start: \nfunction\s+(?P<function>\w+)
    #range-end: '\n\}'
    replace-template:
      <<: *default-replace-template
      match : |-  # |: has \n in last row, |- : no \n in last row.  
        ${indent}${call}(${param}, function (res){
        ${indent}  if(res){${process}}
        ${indent}});
      #update method-1: 
      #match : | 
      #  ${indent}${call}(${param}, "callbackForRetunWindow");
      #  ${indent}window["callbackForRetunWindow"] = function (res){
      #  ${indent}  if(res){${process}}
      #  ${indent}}
  - <<: *default-rule  #reference anchor defined above by *anchor-name
    name: "openMultiMessageDialog2"
    # regex pattern   
    #pattern: (?P<indent>[ \t]*)[\w\s]+=\s*(?P<call>openMultiMessageDialog)\((?P<param>[^{]+)\)\s*\)\s*;[\n\r\t]+if\((?P<check>.+?)\)\{(?P<if>[^}]+?)\}\s*else\s*\{(?P<else>[^}]+?)\}
    pattern: (?P<indent>[ \t]*)(?P<define>[\w\s]+)=\s*(?P<call>openMultiMessageDialog)\((?P<param>\w+)\)
    #(?P<param>[^{]+)\)\s*\)\s*;
    range-start: \nfunction\s+(?P<function>\w+)
    range-end: '\n\}'
    replace-template:
      <<: *default-replace-template
      match : |-  # |: has \n in last row, |- : no \n in last row.  
        ${indent}${call}(${param}, function (${check}){
        ${indent}  if(${check}){${if}}
        ${indent}  else{${if}}
        ${indent}});
      #update method-1: 
      #match : | 
      #  ${indent}${call}(${param}, "callbackForRetunWindow");
      #  ${indent}window["callbackForRetunWindow"] = function (res){
      #  ${indent}  if(res){${process}}
      #  ${indent}}