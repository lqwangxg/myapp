kind: regex-rules
regex-rule-define: &default-rule 
  name: "input"
  # regex pattern   
  range-start: \<(?P<tag>(html:\w+|input))+)\s+
  range-end: \/\>
  pattern: (?P<tag>\<[^\<\s]+\s+)(?P<p1>[^\<\>]*)size="(?P<size>\d+)"(?P<p2>[^\<\>]*)maxlength="(?P<maxlength>\d+)"
  param-patterns:
    full: [] # get params from full content.value
    range: [] # get params from range.value 
    match:  # get params from match.value
        - property\s*=\s*"(?P<elementId>\w+)"
        - styleId\s*=\s*"(?P<styleId>\w+)"
  formulas:
    - if: ${size} > ${maxlength} * 2 
      do: ${size} = ${maxlength} * 2
    - do: ${replace.match} = false

  replace-template: &template
    match: ${tag}${p1}size="${size}"${p2}maxlength="${maxlength}"
#=========================
# write your custom rules below.
#=========================
regex-rules:
  - <<: *default-rule 
    name: "buttonwidth"
    pattern: (?P<tag>\<input\s+)(?P<p1>[^\<\>]*)type=(?P<k1>["']?)button["']?(?P<p2>[^\<\>]*)width:(?P<width>\d+)px(?P<p3>[^\<\>]*)value=(?P<k2>["']?)(?P<value>[^'"]*)["']*(?P<p4>[^\<\>]*)(?P<end>\>)
    formulas:
    - do: lenvalue=len(value) 
    - do: lenUTF8value=lenUTF8(value) 
    - if: lenUTF8value * 10 + 10 < width
      do: width = lenUTF8value * 10 + 30

    replace-template:
      match: ${tag}${p1}type=${k1}button${k1}${p2}width:${width}px${p3}value=${k2}${value}${k2}${p4}${end}
    export-template: 
      match: |
        ${match.value
        --------------------------------------------------------------------------------
  
      group : | 
        group[${index}]${group.key}=${group.value}
      param : | 
        param[${index}]${param.key}=${param.value}
    
  - <<: *default-rule 
    name: "table"
    pattern: (?P<tag>\<table\s+)(?P<p1>[^\<\>]*)width="(?P<width>\d+)px"(?P<p2>[^\<\>]*)(?P<end>\>)

    replace-template:
      match: ${tag}${p1}width="${width}px"${p2}${end}
    export-template: 
      match: |
        ${match.value}
  - <<: *default-rule 
    name: "asign_element_value"
    pattern: (?P<asign>\.value\s*=\s*document.getElementById)\("(?P<id>\w+)"\)\s*;
    
    replace-template:
      match: ${asign}("${id}");
    #export-template: 
    #  match: |
    #    ${tag}${p1}width="${width}px"
    
  - <<: *default-rule 
    name: "select-styleid"
    pattern: (?P<tag>\<html:select\s+)(?P<p1>[^\<\>]*)(?P<end>\\?\>)
    param-patterns:
      init: 
        - styleId=
        - property=
      match:  # get params from match.value
        - property\s*=\s*(?P<property>["']?\w+["']?)
        - styleId\s*=\s*(?P<styleId>["']?\w+["']?)

    formulas:
    - do: skip1 = isEmpty(styleId)
    - do: skip2 = isEmpty(property)
    - do: skip3 = ! skip1
    - do: match.skip = skip3 || skip2
    - do: styleId = property

    replace-template:
      match: ${tag}${p1}styleId=${styleId}${end}
    export-template: 
      match: |
        ${match.value}
        --------------------------------------------------------------------------------
  
      group : | 
        group[${index}]${group.key}=${group.value}
      param : | 
        param[${index}]${param.key}=${param.value}
    