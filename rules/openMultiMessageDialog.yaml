# rule-name
name: openMultiMessageDialog
# rule-group
group: showModalDialog

# file suffix of include/exlude
include-suffix: jsp|html
exclude-suffix: 

# regex pattern   
pattern: if\((?P<call>openMultiMessageDialog)\((?P<param>[^{]+)\)\s*\)\s*\{(?P<process>[^}]+?)\}
# export match template
export-template: | 
  'matchs.count: ${matchs.count}, group.count: ${group.count}, group.keys: ${group.keys}'
  'match.value: ${match.value}'

# replace match template
replace-template: |
  `   ${call}(${param}, \"callbackForRetunWindow\");
      window[\"callbackForRetunWindow\"] = function (res){
        if(res){
        ${process}
        }
      }
  `

# match destination range(spos=startIndex, epos=endIndex + endLength) 
# if range_start is empty then spos=0
# if range_end is empty then epos=length(full)
# optional: if groupname is included in pattern, 
#  { match.group.name: match.group.nalue } will be saved in ${match_params_map}
range_pattern: ""

# before replace process: check full content skip or do.
# priority descend: skip_ifany, skip_when, do_ifany, do_when
# if any true return skip/do;
# optional: if groupname is included in pattern, 
#  { match.group.name: match.group.nalue } will be saved in ${full_params_map}
full_patterns :
  skip_ifany: []
  skip_when: []
  do_ifany: []
  do_when: []

# before replace process: check full content skip or do.
# priority descend: skip_ifany, skip_when, do_ifany, do_when
# if any true return skip/do;
# optional: if groupname is included in pattern, 
#  { match.group.name: match.group.nalue } will be saved in ${match_params_map}
range_patterns:
  skip_ifany: []
  skip_when: []
  do_ifany: []
  do_when: []

# before replace process: check skip or do replace conditions
match_patterns:
  skip_ifany: []
  skip_when: []
  do_ifany: []
  do_when: []

# process for refreshing params
# support functions: 
#  string: len(string), ucase(string), lcase(string)
#  number: +,-,*,/
#  compare: <, <=, >, >=, ==
match_formulas: []

match_evals:
  skip_ifany: []
  skip_when: []
  do_ifany: []
  do_when: []
